# -*- coding: utf-8 -*-
"""Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_yEhXIq8K6U8G8fKUiO2tUALQJCTvPsB
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier

data = pd.read_csv('/content/Classification Dataset.csv')
data

data.isnull().sum()

data.drop(columns=['ID'], axis=1, inplace=True)

def data_preprocessing(data):
  x_train, x_test, y_train, y_test = train_test_split(data.drop(columns=['Personal_Loan']),data['Personal_Loan'] ,test_size=0.2, random_state=42)
  return x_train, x_test, y_train, y_test

def svm_model(x_train, x_test, y_train, y_test):
  sc = StandardScaler()
  x_train = sc.fit_transform(x_train)
  x_test = sc.transform(x_test)
  svm = SVC()
  svm.fit(x_train, y_train)
  y_pred = svm.predict(x_test)
  return accuracy_score(y_test, y_pred)

def random_forest_model(x_train, x_test, y_train, y_test):
  sc = StandardScaler()
  x_train = sc.fit_transform(x_train)
  x_test = sc.transform(x_test)
  rf = RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=42)
  rf.fit(x_train, y_train)
  y_pred = rf.predict(x_test)
  return accuracy_score(y_test, y_pred)

def logistic_regression_model(x_train, x_test, y_train, y_test):
  sc = StandardScaler()
  x_train = sc.fit_transform(x_train)
  x_test = sc.transform(x_test)
  lr = LogisticRegression()
  lr.fit(x_train, y_train)
  y_pred = lr.predict(x_test)
  return accuracy_score(y_test, y_pred)

def knn_model(x_train, x_test, y_train, y_test):
  sc = StandardScaler()
  x_train = sc.fit_transform(x_train)
  x_test = sc.transform(x_test)
  knn = KNeighborsClassifier()
  knn.fit(x_train, y_train)
  y_pred = knn.predict(x_test)
  return accuracy_score(y_test, y_pred)

def gaussian_naive_bayes_model(x_train, x_test, y_train, y_test):
  sc = StandardScaler()
  x_train = sc.fit_transform(x_train)
  x_test = sc.transform(x_test)
  gnb = GaussianNB()
  gnb.fit(x_train, y_train)
  y_pred = gnb.predict(x_test)
  return accuracy_score(y_test, y_pred)

def decision_tree_model(x_train, x_test, y_train, y_test):
  sc = StandardScaler()
  x_train = sc.fit_transform(x_train)
  x_test = sc.transform(x_test)
  dt = DecisionTreeClassifier()
  dt.fit(x_train, y_train)
  y_pred = dt.predict(x_test)
  return accuracy_score(y_test, y_pred)

x_train, x_test, y_train, y_test = data_preprocessing(data)
l = []
l.append(svm_model(x_train, x_test, y_train, y_test)*100)
l.append(random_forest_model(x_train, x_test, y_train, y_test)*100)
l.append(logistic_regression_model(x_train, x_test, y_train, y_test)*100)
l.append(knn_model(x_train, x_test, y_train, y_test)*100)
l.append(gaussian_naive_bayes_model(x_train, x_test, y_train, y_test)*100)
l.append(decision_tree_model(x_train, x_test, y_train, y_test)*100)
result = pd.DataFrame(l,columns=['Accuracy'], index=['SVM', 'Random Forest', 'Logistic Regression', 'KNN', 'gaussian_naive_bayes','Decision Tree'])
result

from matplotlib import pyplot as plt
import seaborn as sns
_df_1.groupby('index').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_2['Accuracy'].plot(kind='line', figsize=(8, 4), title='Accuracy')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(_df_3['index'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(_df_3, x='Accuracy', y='index', inner='stick', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(_df_3['index'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(_df_3, x='Accuracy', y='index', inner='stick', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(_df_3['index'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(_df_3, x='Accuracy', y='index', inner='stick', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

from matplotlib import pyplot as plt
result['Accuracy'].plot(kind='hist', bins=20, title='Accuracy')
plt.gca().spines[['top', 'right',]].set_visible(False)